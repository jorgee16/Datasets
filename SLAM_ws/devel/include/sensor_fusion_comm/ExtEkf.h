// Generated by gencpp from file sensor_fusion_comm/ExtEkf.msg
// DO NOT EDIT!


#ifndef SENSOR_FUSION_COMM_MESSAGE_EXTEKF_H
#define SENSOR_FUSION_COMM_MESSAGE_EXTEKF_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace sensor_fusion_comm
{
template <class ContainerAllocator>
struct ExtEkf_
{
  typedef ExtEkf_<ContainerAllocator> Type;

  ExtEkf_()
    : header()
    , angular_velocity()
    , linear_acceleration()
    , state()
    , flag(0)  {
    }
  ExtEkf_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , angular_velocity(_alloc)
    , linear_acceleration(_alloc)
    , state(_alloc)
    , flag(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _angular_velocity_type;
  _angular_velocity_type angular_velocity;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _state_type;
  _state_type state;

   typedef int32_t _flag_type;
  _flag_type flag;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ignore_state)
  #undef ignore_state
#endif
#if defined(_WIN32) && defined(current_state)
  #undef current_state
#endif
#if defined(_WIN32) && defined(initialization)
  #undef initialization
#endif
#if defined(_WIN32) && defined(state_correction)
  #undef state_correction
#endif

  enum {
    ignore_state = 0u,
    current_state = 1u,
    initialization = 2u,
    state_correction = 3u,
  };


  typedef boost::shared_ptr< ::sensor_fusion_comm::ExtEkf_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor_fusion_comm::ExtEkf_<ContainerAllocator> const> ConstPtr;

}; // struct ExtEkf_

typedef ::sensor_fusion_comm::ExtEkf_<std::allocator<void> > ExtEkf;

typedef boost::shared_ptr< ::sensor_fusion_comm::ExtEkf > ExtEkfPtr;
typedef boost::shared_ptr< ::sensor_fusion_comm::ExtEkf const> ExtEkfConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor_fusion_comm::ExtEkf_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor_fusion_comm::ExtEkf_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensor_fusion_comm::ExtEkf_<ContainerAllocator1> & lhs, const ::sensor_fusion_comm::ExtEkf_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.angular_velocity == rhs.angular_velocity &&
    lhs.linear_acceleration == rhs.linear_acceleration &&
    lhs.state == rhs.state &&
    lhs.flag == rhs.flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensor_fusion_comm::ExtEkf_<ContainerAllocator1> & lhs, const ::sensor_fusion_comm::ExtEkf_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensor_fusion_comm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sensor_fusion_comm::ExtEkf_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor_fusion_comm::ExtEkf_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_fusion_comm::ExtEkf_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_fusion_comm::ExtEkf_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_fusion_comm::ExtEkf_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_fusion_comm::ExtEkf_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor_fusion_comm::ExtEkf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0710aec5a114bc946c3d7687c8e5a0bd";
  }

  static const char* value(const ::sensor_fusion_comm::ExtEkf_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0710aec5a114bc94ULL;
  static const uint64_t static_value2 = 0x6c3d7687c8e5a0bdULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor_fusion_comm::ExtEkf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_fusion_comm/ExtEkf";
  }

  static const char* value(const ::sensor_fusion_comm::ExtEkf_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor_fusion_comm::ExtEkf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"geometry_msgs/Vector3       angular_velocity\n"
"geometry_msgs/Vector3       linear_acceleration\n"
"float32[]                   state\n"
"int32                       flag\n"
"\n"
"uint32                      ignore_state = 0\n"
"uint32                      current_state = 1\n"
"uint32                      initialization = 2\n"
"uint32                      state_correction = 3\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::sensor_fusion_comm::ExtEkf_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor_fusion_comm::ExtEkf_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.angular_velocity);
      stream.next(m.linear_acceleration);
      stream.next(m.state);
      stream.next(m.flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExtEkf_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor_fusion_comm::ExtEkf_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor_fusion_comm::ExtEkf_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "angular_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_velocity);
    s << indent << "linear_acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration);
    s << indent << "state[]" << std::endl;
    for (size_t i = 0; i < v.state.size(); ++i)
    {
      s << indent << "  state[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.state[i]);
    }
    s << indent << "flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_FUSION_COMM_MESSAGE_EXTEKF_H
